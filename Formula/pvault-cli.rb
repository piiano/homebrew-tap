# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.5.0"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-darwin_arm64.tar.gz"
      sha256 "513a5c111a4feaca27b169cb35db14bdfceb51d21e463e40a74462f8d9a0f514"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-darwin_amd64.tar.gz"
      sha256 "bbfb4498a3fc1006cb3012d320a048cca130c05576b42dc0e9d6c8fbd2542fbb"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-linux_arm64.tar.gz"
      sha256 "95e3aea091da92f0daf3d9dda4ea4acda1b0f8b41882f454ad3a302637575d3b"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-linux_amd64.tar.gz"
      sha256 "06aef3810ab0529da7f277ca216700cb5089c4789d9074d398e21ccce1b0d2c4"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
