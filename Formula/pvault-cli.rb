# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.11.4"
  license "Apache-2.0"

  on_macos do
    on_intel do
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.4/pvault-cli-v1.11.4-darwin_amd64.tar.gz"
      sha256 "85f56c0235ed42f2ac949e0e895122d852cd871ed878911f7f45344c90c332f1"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    on_arm do
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.4/pvault-cli-v1.11.4-darwin_arm64.tar.gz"
      sha256 "26fc334ebd9ebfb7b50de5238e74e2e95536340936d74d912dd0f679d7d69d81"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/piiano/vault-releases/releases/download/v1.11.4/pvault-cli-v1.11.4-linux_amd64.tar.gz"
        sha256 "5a6dc7405b314d8f960e2ea6f2203f45c7b2282b90b7553a18039429184d9eaf"

        def install
          bin.install "pvault-cli" => "pvault"
          (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
          (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/piiano/vault-releases/releases/download/v1.11.4/pvault-cli-v1.11.4-linux_arm64.tar.gz"
        sha256 "f6a8c158bd92c603ae3a18a72347734b471f6ede2f0e8ae1ca5578d20f2ea1d4"

        def install
          bin.install "pvault-cli" => "pvault"
          (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
          (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
        end
      end
    end
  end
end
