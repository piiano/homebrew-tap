# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.10.4"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.4/pvault-cli-v1.10.4-darwin_arm64.tar.gz"
      sha256 "d76dc6a075cfbb2919f9838fd839b73ea4bfa3b0e1e561c47ca849b6e52ae503"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.4/pvault-cli-v1.10.4-darwin_amd64.tar.gz"
      sha256 "dc7d0c2caa56e6d07b2bd6d111798bced7552355532b9fa511e03820e2f0b87b"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.4/pvault-cli-v1.10.4-linux_arm64.tar.gz"
      sha256 "9660c759cb48953ab2f1b19bdeeb766ec8ff33a9e2dbf4bb18fb3e881236b1b9"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.4/pvault-cli-v1.10.4-linux_amd64.tar.gz"
      sha256 "d54ca3900f98795bfff0e287ab257e9a2f51203af58a625b1f0360098ee541f9"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
