# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.11.3"
  license "Apache-2.0"

  on_macos do
    on_intel do
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.3/pvault-cli-v1.11.3-darwin_amd64.tar.gz"
      sha256 "286aa6c729177c4759aea1432c8bc5885a31afe1fae9c3171011d32567f85c13"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    on_arm do
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.3/pvault-cli-v1.11.3-darwin_arm64.tar.gz"
      sha256 "3294a71af591e177ea19516151c814ce324ebe115f11481f32df7111be29138e"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/piiano/vault-releases/releases/download/v1.11.3/pvault-cli-v1.11.3-linux_amd64.tar.gz"
        sha256 "f26da759dcf8227fcd74f210f1905d88ca59f98f52adf6bc322d9caf7d098a2a"

        def install
          bin.install "pvault-cli" => "pvault"
          (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
          (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/piiano/vault-releases/releases/download/v1.11.3/pvault-cli-v1.11.3-linux_arm64.tar.gz"
        sha256 "4a8486d80b377fb288c335534382654675c0e9a86c35493091b44bba9768ca15"

        def install
          bin.install "pvault-cli" => "pvault"
          (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
          (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
        end
      end
    end
  end
end
