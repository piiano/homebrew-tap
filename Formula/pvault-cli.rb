# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.9.5"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.5/pvault-cli-v1.9.5-darwin_amd64.tar.gz"
      sha256 "2d2cd7dbb7c6549304448a2090575ff38cea804cb1bc08e0a067f1e6e536836e"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.5/pvault-cli-v1.9.5-darwin_arm64.tar.gz"
      sha256 "098475b58b199c3780cc0732ceadf33c2ea9be8f2ed93d344922b769ee038f72"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.5/pvault-cli-v1.9.5-linux_arm64.tar.gz"
      sha256 "173a1d11450a2805bee95fa625a63813e8842b727344a076b556de4fffd6ec51"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.5/pvault-cli-v1.9.5-linux_amd64.tar.gz"
      sha256 "37e5a654c22791467f85a55e597e8790e7301c7f08967b55132e53eadc914dd0"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
