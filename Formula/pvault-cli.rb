# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.10.2"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-darwin_amd64.tar.gz"
      sha256 "79b8382ab402744ecb42eb763321233fe2e8fca3e6eb01b49c521979d80b6031"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-darwin_arm64.tar.gz"
      sha256 "467bbdd5b2a4888fade388f230f1b7786527bd00a93119352d2ccefa7988d680"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-linux_arm64.tar.gz"
      sha256 "2c3ae17924930a3aca952861ca9ca5b123a2021cb7f23f07a50d11864ba3ca6e"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-linux_amd64.tar.gz"
      sha256 "10fccb802ca4ee14556173a7a1a5af1f0c603ca623b401e1e7b9a80334213402"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
