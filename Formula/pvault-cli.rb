# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.5.0"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-darwin_amd64.tar.gz"
      sha256 "dc5cc845465582886ffc68733aabe3a7995e76810022e098a712cac34ed1b8f4"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-darwin_arm64.tar.gz"
      sha256 "ad61e883fc3ed8d6410cf8480800eae20c501f715f81c65712755555db773d3f"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-linux_arm64.tar.gz"
      sha256 "a1eb983e3a93162ceae6976ffd73b32421f24a6abe7839329495c36807b9283f"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.5.0/pvault-cli-v1.5.0-linux_amd64.tar.gz"
      sha256 "a24b8d47369c4e451cd476c9fa0dcd14371361c6f03257c7d266ec0c670f234b"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
