# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.11.1"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.1/pvault-cli-v1.11.1-darwin_amd64.tar.gz"
      sha256 "e2eab6312136cb3ecb0ba0f998c665db154042569e28aa36cc4ff174a136b191"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.1/pvault-cli-v1.11.1-darwin_arm64.tar.gz"
      sha256 "84a1e789cce62204e3ed7edde259989f2c53acde1e92681658f2dad12d6fd8b0"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.1/pvault-cli-v1.11.1-linux_amd64.tar.gz"
      sha256 "25fc4875daaad57dc49803b3de63d912e7e4c8383de80d025c37d1b7383397f4"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.1/pvault-cli-v1.11.1-linux_arm64.tar.gz"
      sha256 "e601dfcec1e55e15d9840328792a9768e22efe04ec886606d641fb65b8ffc67d"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
