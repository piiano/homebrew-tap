# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.3.0"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.0/pvault-cli-v1.3.0-darwin_arm64.tar.gz"
      sha256 "fcd998db2641c196b5a9e77a0f2cf1fa92c30d2e2926ab5b0246f47bcece3c31"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.0/pvault-cli-v1.3.0-darwin_amd64.tar.gz"
      sha256 "f774cc1ebd7ae3c2b09dce7d9df3bbc1d28323151e18f92fec1d453f0c509c9e"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.0/pvault-cli-v1.3.0-linux_arm64.tar.gz"
      sha256 "07552c91155fc80a31239cffeb9db54fd159a629644d6e3cb5b2951f906fdd0f"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.0/pvault-cli-v1.3.0-linux_amd64.tar.gz"
      sha256 "8d17d2e71a20ce9d1a2e93f167260f492e9400cf10b0b0d0cd681f21cb4127a6"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
