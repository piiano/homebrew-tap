# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.11.0"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.0/pvault-cli-v1.11.0-darwin_amd64.tar.gz"
      sha256 "908f81ace870199f492669d65bcbc308b93b4a370dff092006ba7a326b45a1aa"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.0/pvault-cli-v1.11.0-darwin_arm64.tar.gz"
      sha256 "d45aafcdf51d4e78f510a073583c607cea625b472f2e69fd2743b2c17ca7babb"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.0/pvault-cli-v1.11.0-linux_amd64.tar.gz"
      sha256 "ab3a53f6f4d6189b49a16f7ab853f34e0cc7c67ae553a2355aff2d624002eb15"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.0/pvault-cli-v1.11.0-linux_arm64.tar.gz"
      sha256 "c382a6e57ee2eac4236ac21ed2a25712f5453d8b7df8819f8c3bfd3b5fc9532a"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
