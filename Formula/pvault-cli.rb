# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.11.2"
  license "Apache-2.0"

  on_macos do
    on_intel do
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.2/pvault-cli-v1.11.2-darwin_amd64.tar.gz"
      sha256 "5390d4d8804606b4cf9adf54dd0c248abc7b82e973c2a97ce0fcff5745f2119e"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    on_arm do
      url "https://github.com/piiano/vault-releases/releases/download/v1.11.2/pvault-cli-v1.11.2-darwin_arm64.tar.gz"
      sha256 "58853c8a7b9f86efa3e9381b4d4ead7cebfcb200591d971eb052ebd46c57d084"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/piiano/vault-releases/releases/download/v1.11.2/pvault-cli-v1.11.2-linux_amd64.tar.gz"
        sha256 "7fcb8d6cf3ffa4e4f13066a85f8cdcacb7fd48524c05565419c9e3c03ab9ca96"

        def install
          bin.install "pvault-cli" => "pvault"
          (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
          (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "https://github.com/piiano/vault-releases/releases/download/v1.11.2/pvault-cli-v1.11.2-linux_arm64.tar.gz"
        sha256 "b13b5cf84b462654e80581b6bbd2c4b50ae4d04638ffbe4215ed72298ce15bd1"

        def install
          bin.install "pvault-cli" => "pvault"
          (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
          (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
        end
      end
    end
  end
end
