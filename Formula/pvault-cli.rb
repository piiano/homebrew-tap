# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.10.2"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-darwin_amd64.tar.gz"
      sha256 "30b977aedc036fa4abd8db01961563ccac5f701bd2a2adb37dbc0b4165b6762c"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-darwin_arm64.tar.gz"
      sha256 "c01d5a12be6bc66e0ce3e5960a2795fb71b023751dbdba2986f002348b59dec1"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-linux_arm64.tar.gz"
      sha256 "4efecdde2ab8a574f7145a1b90ef1b6f6d6b2a67e4eeb70a52a7cdc8668327a9"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.10.2/pvault-cli-v1.10.2-linux_amd64.tar.gz"
      sha256 "8b49cca7ad1cf2315ff2bc91196b34d19e2b3fe6ab031cfc5a94c43dfcae1bf0"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
