# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.3.1"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.1/pvault-cli-v1.3.1-darwin_amd64.tar.gz"
      sha256 "7b5def61a1e353d656aab3a4933aa89099d0eeb8a26671f4aee0a3890d463687"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.1/pvault-cli-v1.3.1-darwin_arm64.tar.gz"
      sha256 "c51352701f9b7182d63bd42268adc2960811921180dad4a6dfab62c80cb7b022"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.1/pvault-cli-v1.3.1-linux_amd64.tar.gz"
      sha256 "e1225a4c155f7596dd773ed5fb8ad15215a10c8edd14bad2496051cef6fdcbfa"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.3.1/pvault-cli-v1.3.1-linux_arm64.tar.gz"
      sha256 "7f1c6a16bfba9dbd5497f995b7b9968648b309fba847cbd137c7d99324f05345"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
