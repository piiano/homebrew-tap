# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class PvaultCli < Formula
  desc ""
  homepage "https://piiano.com"
  version "1.9.7"
  license "Apache-2.0"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.7/pvault-cli-v1.9.7-darwin_arm64.tar.gz"
      sha256 "f8a2db885bb09c34aa236a8f91fdb9e5643575b8eb62299d79d3f67f7dd9cc74"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.7/pvault-cli-v1.9.7-darwin_amd64.tar.gz"
      sha256 "75f2369909c824ef550dc76a7493c0f2a4f16227b07da5ccf9e8ecbd088ca7bb"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.7/pvault-cli-v1.9.7-linux_amd64.tar.gz"
      sha256 "0641ff9a50660a6abc337feb2bcb1ff20410ab83dd3928c1869a564be70495cc"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
    if Hardware::CPU.arm? && Hardware::CPU.is_64_bit?
      url "https://github.com/piiano/vault-releases/releases/download/v1.9.7/pvault-cli-v1.9.7-linux_arm64.tar.gz"
      sha256 "532e61dbec6cbc1443ae5c3e40a36a6cceb6bcf41c0c2779430eeae2cf9f4667"

      def install
        bin.install "pvault-cli" => "pvault"
        (bash_completion/"pvault").write Utils.safe_popen_read("#{bin}/pvault completions bash")
        (zsh_completion/"_pvault").write Utils.safe_popen_read("#{bin}/pvault completions zsh")
      end
    end
  end
end
